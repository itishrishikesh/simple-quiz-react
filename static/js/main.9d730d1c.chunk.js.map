{"version":3,"sources":["Components/question.js","App.js","reportWebVitals.js","index.js"],"names":["Question","props","handleOnChange","e","target","checked","sendSelectedAnswer","value","className","Loading","id","QuestionTitle","type","name","OptionA","onChange","for","OptionB","OptionC","OptionD","App","useState","visibility","setVisibility","questionNumber","setQuestionNumber","score","setScore","selectedAnswer","setSelectedAnswer","loading","setLoading","question_title","optionA","optionB","optionC","optionD","correctOption","question","setCurrentQuestion","seconds","setSeconds","interval","useRef","getNewQuestion","fetch","then","response","json","data","question_options","results","incorrect_answers","correct_answer","sort","Math","random","setNewQuestion","useEffect","i","document","getElementsByName","length","alert","stopCounter","startCounter","current","setInterval","prevState","clearInterval","onClick","answer","console","log","ele","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d730d1c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Question(props){\r\n\r\n\tfunction handleOnChange(e){\r\n\t\tif(e.target.checked){\r\n\t\t\tprops.sendSelectedAnswer(e.target.value)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className = { !props.Loading ? \"visible\" : \"invisible\" }>\r\n\t\t\t\t\r\n\t\t\t<div id=\"question_title\">{props.QuestionTitle}</div>\r\n\t\t\t<div id=\"options_container\">\r\n\t\t\t\t<input className = \"radio\" type = \"radio\" id = \"optiona\" name = \"answer\" value = {props.OptionA} onChange = {handleOnChange} />\r\n\t\t\t\t<label className = \"radio-label\" for={props.OptionA}>{props.OptionA}</label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input type = \"radio\" id = \"optionb\" name = \"answer\" value = {props.OptionB} onChange = {handleOnChange} />\r\n\t\t\t\t<label for={props.OptionB}>{props.OptionB}</label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input type = \"radio\" id = \"optionc\" name = \"answer\" value = {props.OptionC} onChange = {handleOnChange} />\r\n\t\t\t\t<label for={props.OptionC}>{props.OptionC}</label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input type = \"radio\" id = \"optiond\" name = \"answer\" value = {props.OptionD} onChange = {handleOnChange} />\r\n\t\t\t\t<label for={props.OptionD}>{props.OptionD}</label>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n}","\nimport React, { useState, useEffect, useRef } from 'react'\nimport Question from './Components/question.js'\nimport \"./App.css\"\n\n\nfunction App() {\n\n  const [visibility, setVisibility] = useState(false)\n  const [questionNumber, setQuestionNumber] = useState(0)\n  const [score, setScore] = useState(0)\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\")\n  const [loading, setLoading] = useState(true)\n  const [question, setCurrentQuestion] = useState({\n    question_title: \"\",\n    optionA: \"\",\n    optionB: \"\",\n    optionC: \"\",\n    optionD: \"\",\n    correctOption: \"\"\n  })\n  const [seconds, setSeconds] = useState(0)\n  const interval = useRef(null)\n  const getQuestionURL = \"https://opentdb.com/api.php?amount=1&category=18&difficulty=easy&type=multiple\";\n\n  function setNewQuestion(data) {\n\n        var shuffle = (array) => array.sort(() => Math.random() - 0.5);\n\n        var question_options = shuffle([data.results[0].incorrect_answers[0],\n            data.results[0].incorrect_answers[1],\n            data.results[0].incorrect_answers[2],\n            data.results[0].correct_answer\n        ])\n      setLoading(false)\n      setCurrentQuestion({\n        question_title: data.results[0].question,\n        optionA: question_options[0],\n        optionB: question_options[1],\n        optionC: question_options[2],\n        optionD: question_options[3],\n        correctOption: data.results[0].correct_answer\n      })\n\n      setQuestionNumber(questionNumber + 1)\n  }\n\n  function getNewQuestion(){\n    setLoading(true)\n    fetch(getQuestionURL)\n      .then(response => response.json())\n      .then(data => setNewQuestion(data))\n  }\n\n  function timer(){\n    if(questionNumber <= 10){\n      if(questionNumber >= 0){\n        if(seconds > 20){\n\n          for(var i=0;i<document.getElementsByName(\"answer\").length;i++)\n            document.getElementsByName(\"answer\")[i].checked = false;\n\n          if(selectedAnswer === question.correctOption)\n            setScore(score + 1)\n          \n          if(questionNumber != 10)\n            getNewQuestion()\n          else{\n            alert(\"You scored \" + score + \" points!\")\n            setScore(0)\n            setQuestionNumber(11)\n          }\n          setSeconds(0)\n        }\n      }\n    }\n    else if(questionNumber == 11){\n      setVisibility(!visibility)\n      setQuestionNumber(0)\n      stopCounter()\n    }\n  }\n\n  function getSelectedAnswer(answer){\n    console.log(answer)\n    setSelectedAnswer(answer)\n  }\n\n  function handleSubmit(){\n    if(questionNumber < 10){\n      if(selectedAnswer === question.correctOption)\n        setScore(score + 1)\n\n      var ele = document.getElementsByName(\"answer\");\n      for(var i=0;i<ele.length;i++)\n        ele[i].checked = false;\n\n      getNewQuestion()\n      setSeconds(0)\n    }\n    else{\n      alert(\"You scored \" + score + \" points!\")\n      setScore(0)\n      setQuestionNumber(11)\n    }\n  }\n\n  function handleOnStart(){\n    getNewQuestion()\n    setVisibility(!visibility)\n    startCounter()\n  }\n  \n  useEffect(timer, [seconds])\n\n  const startCounter = () => interval.current = setInterval(() => {\n    setSeconds(prevState => prevState + 1)\n  }, 1000)\n\n  const stopCounter = () => clearInterval(interval.current)\n\n  return (\n    <div>\n      <div className = { !visibility ? \"visible container\" : \"invisible\" }>\n        <button className=\"center\" onClick={handleOnStart}>Start Quiz!</button>\n      </div>\n\n      <div id = \"question_container\" className = { visibility ? \"visible\" : \"invisible\" }>\n        <div> <strong>Question Number: </strong>{questionNumber} </div>\n        <hr />\n        <div>Your score is {score}</div>\n        <hr />\n        \n        <Question \n          QuestionTitle = {question.question_title} \n          OptionA = {question.optionA} \n          OptionB = {question.optionB} \n          OptionC = {question.optionC} \n          OptionD = {question.optionD}\n          sendSelectedAnswer = {getSelectedAnswer}\n          Loading = {loading}\n        />\n        <div id = {loading ? \"loading\" : \"\"}></div>\n        <div className={loading ? \"invisible\" : \"visible\"}>\n          <button id=\"submit_button\" onClick = {handleSubmit}>Submit</button>          \n        </div>\n        <hr />\n        <div>Time left for answering this question: <span id = \"timer\">{seconds}</span></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}